/**
 * 参考链接：https://www.jianshu.com/p/c45861426eba
 */

class SayHelloTask extends DefaultTask {

    String msg = "default name";
    int age = 20

    @TaskAction
    void sayHello() {
        println "Hello $msg ! Age is ${age}"
    }

}

task test1 {

    doLast {
        println "task test1 exec..."
    }
}
task test2 {
    doLast {
        println "task test2 exec..."
    }
}
task test3 {
    doLast {
        println "task test3 exec..."
    }
}
task hello(type: SayHelloTask, group: "MyGroup")

//对task进行配置，
hello.configure {
    println "hello task configure"
    msg = "hjy"
}

//获取task的名称
println "task name is ${hello.getName()}"
//获取task的组名
println "task group is ${hello.getGroup()}"

//设置task里的属性值，设置 age = 70
hello.setProperty("age", 70)
//获取task里的某个属性值
println "task msg is ${hello.property('msg')}"

//设置依赖的task，只有test1 task执行完后才会执行hello task
hello.dependsOn(test1)
//设置终结者任务，执行完hello task之后会执行test2 task，通常可以用该方法做一些清理操作
hello.finalizedBy(test2)

//如果同时执行hello、test3这2个task，会确保test3执行完之后才执行hello这个task，用这个来保证执行顺序

// 同时运行这两个任务 运行命令 gradle hello test3
hello.setMustRunAfter([test3])

//设置满足某个条件后才执行该task
hello.setOnlyIf {
    //只有当 age = 70 时，才会执行task，否则不会执行
    return hello.property("age") == 70
}


/**
 * 3. TaskContainer接口解析
 */

//当有task创建时
getTasks().whenTaskAdded { Task task ->
    println "The task ${task.getName()} is added to the TaskContainer"
}

//采用create(name: String)创建
getTasks().create("task1") {
    println "task1 创建"
    doLast {
        println "Task1 execute"
    }
}

//采用create(options: Map<String, ?>)创建
getTasks().create([name: "task2", group: "MyGroup", description: "这是task2描述", dependsOn: ["task1"]]) {
    doLast {
        println "Task2 execute"
    }
}

//采用create(options: Map<String, ?>, configure: Closure)创建
getTasks().create("task3", {
    group "MyGroup"
    setDependsOn(["task1", "task2"])
    setDescription "这是task3描述"
})


//通过名字查找指定的task
def task3 = getTasks().findByName("task3")
println "findByName() return task is " + task3

def taskList = getTasks().withType(DefaultTask)
def count = 0
//遍历所有的task，打印出其名字
println "遍历所有的task，开始"
taskList.all { Task t ->

    println "${count++} task name is ${t.name}"
}
println "遍历所有的task，结束"


/**
 *  增量构建 TaskInputs、TaskOutputs：
 *
 *  那么怎么实现一个增量构建呢？一个增量构建必须至少指定一个输入、一个输出，
 *  从前面 Task 的类图中可以看到，Task.getInputs() 对象类型为 TaskInputs，Task.getOutputs() 对象类型为 TaskOuputs，
 *  从中也可以看到inputs、outputs都支持哪些数据类型。同样以一个简单例子来说明：
 *
 */

task inputTask1 {
    //设置inputs
    inputs.property("name", "hjy")
    inputs.property("age", 20)
    //设置outputs
    outputs.file("$buildDir/test.txt")

    doLast {
        println "exec task inputTask1"
    }
}

task inputTask2 {
    doLast {
        println "exec task inputTask2"
    }
}

class SayHelloTask2 extends DefaultTask {

    //定义输入
    @Input
    String username;
    @Input
    int age

    //定义输出
    @OutputDirectory
    File destDir;

    @TaskAction
    void sayHello() {
        println "Hello $username ! age is $age"
    }

}

task testtaskInputsAnnotation(type: SayHelloTask2) {
    age = 18
    username = "hjy"
    destDir = file("$buildDir/test")
    println "destDir path = ${destDir.absolutePath}"
}



